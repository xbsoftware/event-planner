// Production schema for Turso (libSQL)
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum UserRole {
  REGULAR
  MANAGER
  ADMIN
}

// Enum for event status
enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

// User model
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  role        UserRole @default(REGULAR)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  createdEvents  Event[]        @relation("EventCreator")
  managedEvents  Event[]        @relation("EventManager")
  registrations  Registration[]

  @@map("users")
}

// Event model
model Event {
  id               String      @id @default(cuid())
  title            String
  description      String?
  location         String?
  startDate        DateTime
  endDate          DateTime?
  maxParticipants  Int?
  isPublic         Boolean     @default(true)
  status           EventStatus @default(UPCOMING)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Foreign keys
  createdById String
  managerId   String?

  // Relationships
  createdBy     User           @relation("EventCreator", fields: [createdById], references: [id], onDelete: Cascade)
  manager       User?          @relation("EventManager", fields: [managerId], references: [id], onDelete: SetNull)
  registrations Registration[]

  // Custom fields (JSON)
  customFields Json?

  @@map("events")
}

// Registration model
model Registration {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  eventId String
  userId  String

  // Relationships
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Custom field responses (JSON)
  customFieldResponses Json?

  // Unique constraint
  @@unique([eventId, userId])
  @@map("registrations")
}

// Custom field model for events
model CustomField {
  id          String   @id @default(cuid())
  eventId     String
  fieldName   String
  fieldType   String   // 'text', 'email', 'select', 'textarea', etc.
  isRequired  Boolean  @default(false)
  options     Json?    // For select fields
  placeholder String?
  createdAt   DateTime @default(now())

  @@map("custom_fields")
}
